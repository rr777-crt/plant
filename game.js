const runnerConfig = {
    speed: 5,       // –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    jumpForce: 12,  // –≤—ã—Å–æ—Ç–∞ –ø—Ä—ã–∂–∫–∞
    gravity: 0.5,   // –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
    rewardDrops: 10,// –∫–∞–ø–ª–∏ –∑–∞ —Å–µ–∫—É–Ω–¥—É
    rewardSuns: 1,  // —Å–æ–ª–Ω—Ü–∞ –∑–∞ 10 —Å–µ–∫—É–Ω–¥
    gameCost: 75,   // —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    obstacleSpawnRate: 0.007, // —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    obstacles: ['ü™®', 'üåµ', 'üß±', 'ü™µ'], // –≤–∏–¥—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    buffs: {
        invincible: {
            chance: 0.05, // 5% —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞
            duration: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
            icon: 'üõ°Ô∏è'
        }
    }
};
function startRunnerGame() {
    if (score < runnerConfig.gameCost) {
        showMessage(`–ù—É–∂–Ω–æ ${runnerConfig.gameCost} –∫–∞–ø–µ–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞!`);
        return;
    }
    
    getScore(-runnerConfig.gameCost); // –°–Ω–∏–º–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã
    
    runnerGameActive = true;
    runnerScore = 0;
    survivalTime = 0;
    runnerPlayerY = 0;
    runnerVelocityY = 0;
    runnerSpeed = runnerConfig.speed;
    obstacles = [];
    activeBuffs = [];
    
    runnerContainer.style.display = 'block';
    runnerScoreDisplay.textContent = `–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! (-${runnerConfig.gameCost} –∫–∞–ø–µ–ª—å)`;
    lastFrameTime = performance.now();
    requestAnimationFrame(runnerGameLoop);
}
let obstacles = [];
let activeBuffs = []; // –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã
let isInvincible = false; // –§–ª–∞–≥ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
function createObstacle() {
    // –°–ø–∞–≤–Ω –±–∞—Ñ—Ñ–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º
    if (Math.random() < runnerConfig.buffs.invincible.chance) {
        createBuff('invincible');
        return;
    }
    
    // –û–±—ã—á–Ω—ã–π —Å–ø–∞–≤–Ω –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (—Å —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π)
    if (Math.random() < runnerConfig.obstacleSpawnRate * runnerSpeed) {
        const obstacle = document.createElement('div');
        const type = runnerConfig.obstacles[Math.floor(Math.random() * runnerConfig.obstacles.length)];
        
        obstacle.textContent = type;
        obstacle.style.cssText = `
            position: absolute;
            right: -50px;
            bottom: 20px;
            font-size: 30px;
            line-height: 1;
        `;
        
        runnerContainer.appendChild(obstacle);
        obstacles.push({
            element: obstacle,
            x: window.innerWidth,
            width: 40,
            height: 40,
            type: type
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ñ—Ñ–∞
function createBuff(type) {
    const buff = document.createElement('div');
    buff.textContent = runnerConfig.buffs[type].icon;
    buff.style.cssText = `
        position: absolute;
        right: -50px;
        bottom: ${50 + Math.random() * 100}px;
        font-size: 30px;
        line-height: 1;
        animation: float 3s infinite;
    `;
    
    runnerContainer.appendChild(buff);
    obstacles.push({
        element: buff,
        x: window.innerWidth,
        width: 30,
        height: 30,
        isBuff: true,
        buffType: type
    });
}
// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–∞—Ñ—Ñ–∞
function activateBuff(type) {
    showMessage(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–∞—Ñ—Ñ: ${type === 'invincible' ? '–ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã!' : ''}`);
    
    if (type === 'invincible') {
        isInvincible = true;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        runnerPlayer.style.boxShadow = '0 0 15px gold';
        runnerPlayer.style.animation = 'glow 0.5s infinite alternate';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        activeBuffs.push({
            type: type,
            endTime: performance.now() + runnerConfig.buffs[type].duration
        });
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ—Ñ–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ –≤ gameLoop –ø–µ—Ä–µ–¥ requestAnimationFrame)
function checkBuffs() {
    const now = performance.now();
    activeBuffs = activeBuffs.filter(buff => {
        if (now >= buff.endTime) {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –±–∞—Ñ—Ñ–∞
            if (buff.type === 'invincible') {
                isInvincible = false;
                runnerPlayer.style.boxShadow = '';
                runnerPlayer.style.animation = '';
                showMessage('–ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!');
            }
            return false;
        }
        return true;
    });
}
function endRunnerGame() {
    runnerGameActive = false;
    isInvincible = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
    activeBuffs = []; // –û—á–∏—â–∞–µ–º –±–∞—Ñ—Ñ—ã
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    runnerPlayer.style.boxShadow = '';
    runnerPlayer.style.animation = '';
    
    runnerContainer.style.display = 'none';
    
    // –≠—Ñ—Ñ–µ–∫—Ç "–≤–∑—Ä—ã–≤–∞" –∏–≥—Ä–æ–∫–∞
    const explosion = document.createElement('div');
    explosion.textContent = 'üí•';
    explosion.style.cssText = `
        position: absolute;
        left: 20px;
        bottom: 20px;
        font-size: 50px;
        animation: fadeOut 1s forwards;
    `;
    
    document.body.appendChild(explosion);
    setTimeout(() => explosion.remove(), 1000);
    
    const dropsEarned = runnerScore * runnerConfig.rewardDrops;
    const sunsEarned = Math.floor(runnerScore / 10) * runnerConfig.rewardSuns;
    
    getScore(dropsEarned);
    getSuns(sunsEarned);
    
    showMessage(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–∂–∏–ª: ${runnerScore} —Å–µ–∫. –ü–æ–ª—É—á–µ–Ω–æ: ${dropsEarned} –∫–∞–ø–µ–ª—å –∏ ${sunsEarned} —Å–æ–ª–Ω—Ü!`);
    saveSystem.saveRunnerGame();
}
