// ================ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–ù–û–ü–ö–ò ================
const runnerStartButton = document.createElement('button');
runnerStartButton.id = 'runner-start-btn';
runnerStartButton.textContent = 'GAME POM';
runnerStartButton.style.cssText = `
    position: fixed;
    bottom: 80px;
    right: 20px;
    padding: 12px 24px;
    background: linear-gradient(135deg, #FF5722, #FF9800);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transition: all 0.3s;
`;

// –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
runnerStartButton.onmouseenter = () => {
    runnerStartButton.style.transform = 'scale(1.05)';
    runnerStartButton.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';
};
runnerStartButton.onmouseleave = () => {
    runnerStartButton.style.transform = '';
    runnerStartButton.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
};

// ================ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î –ó–ê–ü–£–°–ö–ê ================
function initRunnerGame() {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DOM
    if (!document.getElementById('runner-start-btn')) {
        document.body.appendChild(runnerStartButton);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updatePlayButton();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    runnerStartButton.onclick = startRunnerGame;
}

// ================ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–ù–û–ü–ö–ò ================
function updatePlayButton() {
    const now = Date.now();
    const oneHourAgo = now - 3600000;
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å
    if (lastPlayTime < oneHourAgo) {
        playsCount = 0;
    }
    
    const playsLeft = runnerConfig.maxPlaysPerHour - playsCount;
    
    if (playsLeft > 0) {
        runnerStartButton.innerHTML = `üéÆ GAME POM <small>(${playsLeft}/3)</small>`;
        runnerStartButton.style.background = 'linear-gradient(135deg, #FF5722, #FF9800)';
        runnerStartButton.disabled = false;
    } else {
        const nextPlayTime = new Date(lastPlayTime + 3600000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        runnerStartButton.innerHTML = `‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ –≤ ${nextPlayTime}`;
        runnerStartButton.style.background = '#999';
        runnerStartButton.disabled = true;
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç
        const timeLeft = (lastPlayTime + 3600000) - now;
        if (timeLeft > 0) {
            setTimeout(updatePlayButton, timeLeft + 1000);
        }
    }
}

// ================ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï ================
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveSystem.loadRunnerGame();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    initRunnerGame();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setInterval(updatePlayButton, 60000);
});

// ================ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–ù–û–ü–ö–ò ================
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –Ω–µ —É–¥–∞–ª–∏–ª–∏ –ª–∏ –∫–Ω–æ–ø–∫—É (–Ω–∞ —Å–ª—É—á–∞–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏)
setInterval(() => {
    if (!document.getElementById('runner-start-btn')) {
        console.log('–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø–∞–ª–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º!');
        initRunnerGame();
    }
}, 5000);
const runnerConfig = {
    speed: 5,
    jumpForce: 12,
    gravity: 0.5,
    rewardDrops: 10,
    rewardSuns: 1,
    obstacles: ['ü™®', 'üåµ', 'üß±', 'ü™µ'],
    spawnRate: 0.005, // –ë—ã–ª–æ 0.01 (–≤ 2 —Ä–∞–∑–∞ —Ä–µ–∂–µ)
    maxPlaysPerHour: 3,
    speedBoost: {
        duration: 3000, // 3 —Å–µ–∫ —É—Å–∫–æ—Ä–µ–Ω–∏—è
        multiplier: 1.5, // x1.5 —Å–∫–æ—Ä–æ—Å—Ç–∏
        chance: 0.2 // 20% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è
    }
};

// ================ –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ================
let playsCount = 0;
let lastPlayTime = 0;
let isSpeedBoostActive = false;
let speedBoostEndTime = 0;

// ================ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –°–ü–ê–í–ù –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ô ================
function trySpawnObstacle() {
    // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞ (spawnRate)
    if (Math.random() < runnerConfig.spawnRate * (1 + survivalTime / 100)) {
        createObstacle();
        
        // –° —à–∞–Ω—Å–æ–º 20% —Å–æ–∑–¥–∞—ë–º –±—É—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        if (Math.random() < runnerConfig.speedBoost.chance) {
            createSpeedBoost();
        }
    }
}

// ================ –ë–£–°–¢ –°–ö–û–†–û–°–¢–ò ================
function createSpeedBoost() {
    const boost = document.createElement('div');
    boost.textContent = '‚ö°';
    boost.style.cssText = `
        position: absolute;
        right: -30px;
        bottom: 50px;
        font-size: 25px;
        z-index: 2;
        animation: float 2s infinite;
    `;
    
    const xPos = window.innerWidth + 50;
    const boostObj = {
        element: boost,
        x: xPos,
        width: 30,
        height: 30
    };
    
    runnerContainer.appendChild(boost);
    obstacles.push(boostObj);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –±—É—Å—Ç–∞
    const checkBoost = setInterval(() => {
        if (!runnerGameActive) {
            clearInterval(checkBoost);
            return;
        }
        
        boostObj.x -= runnerSpeed;
        boost.style.right = `${window.innerWidth - boostObj.x}px`;
        
        // –ö–æ–ª–ª–∏–∑–∏—è —Å –∏–≥—Ä–æ–∫–æ–º
        if (
            boostObj.x < 80 && 
            boostObj.x > 30 &&
            runnerPlayerY < 30
        ) {
            activateSpeedBoost();
            runnerContainer.removeChild(boost);
            clearInterval(checkBoost);
        }
        
        if (boostObj.x < -30) {
            runnerContainer.removeChild(boost);
            clearInterval(checkBoost);
        }
    }, 16);
}

function activateSpeedBoost() {
    isSpeedBoostActive = true;
    speedBoostEndTime = Date.now() + runnerConfig.speedBoost.duration;
    
    // –≠—Ñ—Ñ–µ–∫—Ç
    runnerPlayer.style.boxShadow = '0 0 15px yellow';
    const particles = setInterval(() => {
        if (!isSpeedBoostActive) {
            clearInterval(particles);
            return;
        }
        createParticle();
    }, 200);
    
    setTimeout(() => {
        isSpeedBoostActive = false;
        runnerPlayer.style.boxShadow = '';
    }, runnerConfig.speedBoost.duration);
}

function createParticle() {
    const particle = document.createElement('div');
    particle.textContent = '‚ú®';
    particle.style.cssText = `
        position: absolute;
        left: 40px;
        bottom: ${20 - runnerPlayerY}px;
        font-size: 16px;
        animation: particleFade 1s forwards;
    `;
    
    runnerContainer.appendChild(particle);
    setTimeout(() => particle.remove(), 1000);
}

// ================ –õ–ò–ú–ò–¢ –ò–ì–† ================
function canPlayGame() {
    const now = Date.now();
    const oneHourAgo = now - 3600000;
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à—ë–ª —á–∞—Å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    if (lastPlayTime < oneHourAgo) {
        playsCount = 0;
        lastPlayTime = now;
        return true;
    }
    
    return playsCount < runnerConfig.maxPlaysPerHour;
}

function startRunnerGame() {
    if (!canPlayGame()) {
        const nextPlayTime = new Date(lastPlayTime + 3600000).toLocaleTimeString();
        showMessage(`–õ–∏–º–∏—Ç –∏–≥—Ä! –°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –≤ ${nextPlayTime}`, 'red');
        return;
    }
    
    playsCount++;
    lastPlayTime = Date.now();
    updatePlayButton();
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã ...
}

function updatePlayButton() {
    const playsLeft = runnerConfig.maxPlaysPerHour - playsCount;
    runnerStartButton.textContent = `GAME POM (${playsLeft}/3)`;
    runnerStartButton.style.background = playsLeft > 0 ? '#FF5722' : '#999';
}

// ================ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ì–ï–ô–ú–õ–£–ü ================
function runnerGameLoop(timestamp) {
    if (!runnerGameActive) return;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±—É—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
    const currentSpeed = isSpeedBoostActive ? 
        runnerSpeed * runnerConfig.speedBoost.multiplier : 
        runnerSpeed;
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∞–≤–Ω —Å –Ω–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º spawnRate
    trySpawnObstacle();
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–µ ...
}

// ================ –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ò–õ–ò ================
const boostStyles = document.createElement('style');
boostStyles.textContent = `
    @keyframes float {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
    @keyframes particleFade {
        0% { opacity: 1; transform: translate(0, 0); }
        100% { opacity: 0; transform: translate(-20px, -30px); }
    }
`;
document.head.appendChild(boostStyles);

// ================ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–û–•–†–ê–ù–ï–ù–ò–Ø–ú–ò ================
saveSystem.saveRunnerGame = function() {
    const data = JSON.parse(localStorage.getItem('plantClickerSave') || '{}');
    data.runnerStats = {
        bestScore: Math.max(data.runnerStats?.bestScore || 0, runnerScore),
        lastPlayTime: lastPlayTime,
        playsCount: playsCount
    };
    localStorage.setItem('plantClickerSave', JSON.stringify(data));
};

saveSystem.loadRunnerGame = function() {
    const data = JSON.parse(localStorage.getItem('plantClickerSave') || '{}');
    if (data.runnerStats) {
        lastPlayTime = data.runnerStats.lastPlayTime || 0;
        playsCount = data.runnerStats.playsCount || 0;
        updatePlayButton();
    }
};
