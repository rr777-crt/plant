'use strict';
const runnerUpgrades = {
    speedBoost: {
        name: "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å +2",
        price: 500,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä–µ",
        bought: false,
        apply: function() {
            runnerConfig.speed += 2;
        }
    },
    jumpBoost: {
        name: "ü¶ò –ü—Ä—ã–∂–æ–∫ +3",
        price: 700,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –ø—Ä—ã–∂–∫–∞",
        bought: false,
        apply: function() {
            runnerConfig.jumpForce += 3;
        }
    },
    invincibility: {
        name: "üõ°Ô∏è –ß–∞—â–µ –±–∞—Ñ—Ñ—ã",
        price: 1200,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è –±–∞—Ñ—Ñ–∞ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏",
        bought: false,
        apply: function() {
            runnerConfig.buffs.invincible.chance *= 2;
        }
    },
    cheaperGame: {
        name: "üí∏ –°–∫–∏–¥–∫–∞ 50%",
        price: 1500,
        description: "–£–º–µ–Ω—å—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã",
        bought: false,
        apply: function() {
            runnerConfig.gameCost = Math.floor(runnerConfig.gameCost / 2);
        }
    }
};

const scoreText = document.getElementById("score");
const addText = document.getElementById("add");
const button = document.getElementById("button");
const sunsDiv = document.getElementById("suns");
const shopContainer = document.getElementById("shopContainer");
const shopOverlay = document.getElementById("shopOverlay");
const shopContent = document.getElementById("shop-content");

let isLoadingReady = false;
console.log('v', '001');

const musicList = [
  'Grasswalk.mp3',
];
const MUSIC = {};
let loadCount = 5;

musicList.forEach((m, i) => {
   const music = new Audio();
   music.src = m;
   MUSIC[m] = music;
   music.oncanplaythrough = (e) => {
    e.target.oncanplaythrough = null;
    loadCount++;
    if (loadCount === musicList.length) isLoadingReady = true;
     console.log('isLoadingReady', isLoadingReady);
   }
});

let score = 0;
let addPerClick = 1;
let addPerSecond = 0;
let suns = 0;
let addSuns = 0.01;
let isBonusActive = false;

// –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤
const shopItems = [
    {
        name: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Ö",
        price: 500,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 50%",
        effect: () => {
            addPerClick *= 1.5;
            addText.innerText = Math.floor(addPerClick);
            showMessage("–î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω!");
        }
    },
    {
        name: "–ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç–æ–∫",
        price: 1000,
        description: "–î–∞–µ—Ç +1000 –∫–∞–ø–µ–ª—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥",
        effect: () => {
            setInterval(() => getScore(1000), 10000);
            showMessage("–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!");
        }
    },
    {
        name: "–°–æ–ª–Ω–µ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å",
        price: 5000,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–æ–ª–Ω—Ü –≤ 2 —Ä–∞–∑–∞",
        effect: () => {
            addSuns *= 2;
            showMessage("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–æ–ª–Ω—Ü —É–¥–≤–æ–µ–Ω–æ!");
        }
    },
    {
        name: "–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å",
        price: 10000,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ 500/—Å–µ–∫",
        effect: () => {
            addPerSecond += 500;
            showMessage("–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω!");
        }
    },
    {
        name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ—Ä–æ—Ö",
        price: 50000,
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Ö–æ–¥—ã –≤ 3 —Ä–∞–∑–∞", 
        effect: () => {
            addPerClick *= 3;
            addPerSecond *= 3;
            addSuns *= 3;
            addText.innerText = Math.floor(addPerClick);
            showMessage("–í–°–ï –¥–æ—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –≤ 3 —Ä–∞–∑–∞!!!");
        }
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
function initShop() {
    shopContent.innerHTML = '';
    shopItems.forEach((item, index) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'shop-item';
        itemElement.innerHTML = `
            <h3>${item.name}</h3>
            <div class="description">${item.description}</div>
            <div class="price">–¶–µ–Ω–∞: ${item.price} –∫–∞–ø–µ–ª—å</div>
            <button onclick="buyShopItem(${index})" ${score < item.price ? 'disabled' : ''}>
                –ö—É–ø–∏—Ç—å
            </button>
        `;
        shopContent.appendChild(itemElement);
    });
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function buyShopItem(index) {
    const item = shopItems[index];
    if (score < item.price) return;
    
    getScore(-item.price);
    item.effect();
    initShop(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text) {
    const message = document.createElement('div');
    message.className = 'shop-message';
    message.textContent = text;
    document.body.appendChild(message);
    
    setTimeout(() => {
        message.remove();
    }, 3000);
}

// –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
function toggleShop() {
    shopContainer.classList.toggle('active');
    shopOverlay.classList.toggle('active');
    initShop();
}

button.onclick = function() {
    if (isBonusActive) {
        getScore(addPerClick * 10);
        isBonusActive = false;
    } else {
        getScore(addPerClick);
    }
    getSuns(addSuns);
    checkBGImage();
    
    if (isLoadingReady && score >= 500) {
        isLoadingReady = false;
        MUSIC['Grasswalk.mp3'].play();
    }
};

function getScore(n) {
    score += n;
    scoreText.innerText = score;
}

function getSuns(n) {
    suns += n;
    sunsDiv.innerText = suns.toFixed(2);
}

function getClickAdd(n, price) {
    if (score < price) return;
    getScore(-price);
    addPerClick = n;
    addText.innerText = addPerClick;
}

function mining(scorePerSec, price) {
    if (score < price) return;
    getScore(-price);
    addPerSecond += scorePerSec;
}

function getScoreForSuns(score_n, suns_n) {
    if (suns < suns_n) return;
    getScore(score_n);
    getSuns(-suns_n);
}

function checkBGImage() {
    if (score > 1000) {
        button.style.backgroundImage = 'url(https://klev.club/uploads/posts/2023-11/1698878136_klev-club-p-arti-gorokhostrel-zombi-43.jpg)';
    }
    if (score > 10000) {
        button.style.backgroundImage = 'url(https://pvsz2.ru/statics/plants-big/31.png)';
    }
    if (score > 1000000) {
        button.style.backgroundImage = 'url(https://avatars.mds.yandex.net/i?id=69a2b4239be746c0863ff1d2bf2c2a75_l-8972142-images-thumbs&n=13)';
    }
    if (score > 100000000) {
        button.style.backgroundImage = 'url(https://i.pinimg.com/originals/8e/0f/57/8e0f5777b6643cdc67dcfce5db6c1d70.jpg)';
    }
    if (score > 1000000000) {
        button.style.backgroundImage = 'url(https://files.vgtimes.ru/download/posts/2020-04/thumbs/1587903142_gxxpmj5u6ke3vkxewf1y0g.jpg)';
    }
    if (score > 100000000000) {
        button.style.backgroundImage = 'url(https://img.razrisyika.ru/kart/14/1200/53948-gorohostrel-13.jpg)';
    }
    if (score > 1000000000000) {
        button.style.backgroundImage = 'url(https://png.klev.club/uploads/posts/2024-04/png-klev-club-f8lu-p-gorokhostrel-png-20.png)';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–µ–ª–µ–Ω–æ–≥–æ —à–∞—Ä–∏–∫–∞
function createGreenBall() {
    if (Math.random() > 0.1) return; // 10% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è
    
    const ball = document.createElement('div');
    ball.className = 'green-ball';
    
    // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const x = Math.random() * (window.innerWidth - 60);
    const y = Math.random() * (window.innerHeight - 60);
    
    ball.style.left = `${x}px`;
    ball.style.top = `${y}px`;
    
    ball.onclick = function() {
        isBonusActive = true;
        showMessage("–ë–û–ù–£–°! –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –¥–∞—Å—Ç x10 –¥–æ—Ö–æ–¥!");
        ball.remove();
        setTimeout(() => {
            isBonusActive = false;
        }, 10000); // –ë–æ–Ω—É—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 —Å–µ–∫—É–Ω–¥
    };
    
    document.body.appendChild(ball);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (ball.parentNode) {
            ball.remove();
        }
    }, 15000);
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞
setInterval(createGreenBall, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
setInterval(() => {
    getScore(addPerSecond);
}, 1000);

// –ö–µ–π—Å—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
let casePrice = 1;
function buyCase() {
    if (score < casePrice) {
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞!");
        return;
    }
    
    getScore(-casePrice);
    const random = Math.random() * 100;
    
    if (random <= 50) {
        getScore(900);
        alert("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 900 –∫–∞–ø–µ–ª—å!");
    } else if (random <= 80) {
        getSuns(5);
        alert("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 —Å–æ–ª–Ω—Ü!");
    } else if (random <= 95) {
        getScore(1000000);
        alert("–í–´ –í–´–ò–ì–†–ê–õ–ò –î–ñ–ï–ö–ü–û–¢! 1,000,000 –∫–∞–ø–µ–ª—å!");
    } else {
        getSuns(100);
        alert("–ú–ï–ì–ê–£–î–ê–ß–ê! 100 —Å–æ–ª–Ω—Ü!!!");
    }
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?")) {
        score = 0;
        addPerClick = 1;
        addPerSecond = 0;
        suns = 0;
        addSuns = 0.01;
        
        scoreText.innerText = score;
        addText.innerText = addPerClick;
        sunsDiv.innerText = suns.toFixed(2);
        
        button.style.backgroundImage = 'url(https://pvsz2.ru/statics/plants-big/68.png)';
    }
}
// ================ –ú–ê–ì–ê–ó–ò–ù –£–õ–£–ß–®–ï–ù–ò–ô ================
function createUpgradeShop() {
    const shop = document.createElement('div');
    shop.id = 'runner-upgrade-shop';
    shop.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0,0,0,0.9);
        padding: 20px;
        border-radius: 10px;
        color: white;
        z-index: 1005;
        display: none;
        width: 80%;
        max-width: 500px;
        max-height: 80vh;
        overflow-y: auto;
    `;

    const title = document.createElement('h2');
    title.textContent = 'üè™ –£–ª—É—á—à–µ–Ω–∏—è –º–∏–Ω–∏-–∏–≥—Ä—ã';
    title.style.textAlign = 'center';
    shop.appendChild(title);

    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
    closeBtn.onclick = () => shop.style.display = 'none';
    closeBtn.style.cssText = `
        display: block;
        margin: 20px auto 0;
        padding: 10px 20px;
        background: #FF5722;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    Object.values(runnerUpgrades).forEach(upgrade => {
        const item = document.createElement('div');
        item.style.margin = '15px 0';
        item.style.padding = '15px';
        item.style.border = '1px solid #444';
        item.style.borderRadius = '5px';

        const name = document.createElement('h3');
        name.textContent = upgrade.name;
        name.style.margin = '0 0 10px 0';
        name.style.color = upgrade.bought ? '#aaa' : '#FFD700';

        const desc = document.createElement('p');
        desc.textContent = upgrade.description;
        desc.style.margin = '0 0 10px 0';
        desc.style.color = '#ccc';

        const price = document.createElement('p');
        price.textContent = `–¶–µ–Ω–∞: ${upgrade.price} –∫–∞–ø–µ–ª—å`;
        price.style.margin = '0 0 10px 0';
        price.style.color = upgrade.bought ? '#aaa' : '#88f';

        const btn = document.createElement('button');
        btn.textContent = upgrade.bought ? '–ö—É–ø–ª–µ–Ω–æ ‚úì' : '–ö—É–ø–∏—Ç—å';
        btn.disabled = upgrade.bought;
        btn.style.cssText = `
            padding: 8px 15px;
            width: 100%;
            background: ${upgrade.bought ? '#333' : '#4CAF50'};
            color: white;
            border: none;
            border-radius: 5px;
            cursor: ${upgrade.bought ? 'default' : 'pointer'};
        `;

        if (!upgrade.bought) {
            btn.onclick = () => {
                if (score >= upgrade.price) {
                    getScore(-upgrade.price);
                    upgrade.bought = true;
                    upgrade.apply();
                    btn.textContent = '–ö—É–ø–ª–µ–Ω–æ ‚úì';
                    btn.disabled = true;
                    btn.style.background = '#333';
                    name.style.color = '#aaa';
                    price.style.color = '#aaa';
                    saveGame();
                    showMessage(`–£–ª—É—á—à–µ–Ω–∏–µ "${upgrade.name}" –∫—É–ø–ª–µ–Ω–æ!`);
                } else {
                    showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å!');
                }
            };
        }

        item.appendChild(name);
        item.appendChild(desc);
        item.appendChild(price);
        item.appendChild(btn);
        shop.appendChild(item);
    });

    shop.appendChild(closeBtn);
    document.body.appendChild(shop);
    return shop;
}

// –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let upgradeShop = null;
document.addEventListener('DOMContentLoaded', () => {
    upgradeShop = createUpgradeShop();
    loadUpgrades();
});

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
const upgradeShopBtn = document.createElement('button');
upgradeShopBtn.textContent = '–£–ª—É—á—à–µ–Ω–∏—è –º–∏–Ω–∏-–∏–≥—Ä—ã';
upgradeShopBtn.style.cssText = `
    position: fixed;
    bottom: 130px;
    right: 20px;
    padding: 10px 15px;
    background: linear-gradient(135deg, #673AB7, #9C27B0);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
`;
upgradeShopBtn.onclick = () => upgradeShop.style.display = 'block';
document.body.appendChild(upgradeShopBtn);

// ================ –°–û–•–†–ê–ù–ï–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô ================
function saveUpgrades() {
    const upgradesData = {};
    Object.keys(runnerUpgrades).forEach(key => {
        upgradesData[key] = runnerUpgrades[key].bought;
    });
    localStorage.setItem('runnerUpgrades', JSON.stringify(upgradesData));
}

function loadUpgrades() {
    const saved = localStorage.getItem('runnerUpgrades');
    if (saved) {
        const upgradesData = JSON.parse(saved);
        Object.keys(upgradesData).forEach(key => {
            if (runnerUpgrades[key] && upgradesData[key]) {
                runnerUpgrades[key].bought = true;
                runnerUpgrades[key].apply();
            }
        });
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é saveGame():
function saveGame() {
    const gameData = {
        score: score,
        addPerClick: addPerClick,
        addPerSecond: addPerSecond,
        suns: suns,
        addSuns: addSuns,
        backgroundImage: button.style.backgroundImage,
        upgrades: {}
    };
    
    Object.keys(runnerUpgrades).forEach(key => {
        gameData.upgrades[key] = runnerUpgrades[key].bought;
    });
    
    localStorage.setItem('grohostrelSave', JSON.stringify(gameData));
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é loadGame():
function loadGame() {
    const savedData = localStorage.getItem('grohostrelSave');
    if (!savedData) return false;
    
    try {
        const gameData = JSON.parse(savedData);
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ ...
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        if (gameData.upgrades) {
            Object.keys(gameData.upgrades).forEach(key => {
                if (runnerUpgrades[key]) {
                    runnerUpgrades[key].bought = gameData.upgrades[key];
                    if (runnerUpgrades[key].bought) {
                        runnerUpgrades[key].apply();
                    }
                }
            });
        }
        
        return true;
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
        return false;
    }
}
